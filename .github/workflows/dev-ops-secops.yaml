name: Docker Images , CodeCV, SYNK - Exercise 1 and 2.

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened]

jobs:
  build:
    runs-on: ubuntu-latest  
    env:
      CI: true
      REGION: europe-west3
    permissions:
      contents: 'read'
      packages: write
      id-token: 'write'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      #Exercise 1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install development dependencies
        run: pip install -r requirements-dev.txt
        
      #1- pytest-cov into our test run.
      - name: Install pytest-xdist
        run: pip install pytest-xdist

      - name: Upgrade pytest
        run: pip install --upgrade pytest

      - name: Parallel tests
        run: pytest -n auto

      - name: Run pylint
        run: pylint taskman

       #Exercise 2 

       #2- Submit the results to a service measuring the code by CODE-CV
      - name: Generate Report
        run: |
         pip install codecov
         pip install pytest-cov
         pytest --cov=./ --cov-report=xml
         codecov

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECV_TOKEN }}

    #3- Integrate a security scanner into the pipeline that analyses our code and dependencies by snyk.
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Snyk
        run: npm install -g snyk

      - name: Scan for security vulnerabilities
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --file=requirements.txt
    
    #4 - Build a container and pushing it to the github container registry.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/hs-heilbronn-devsecop-kis/my_package:${{ github.sha }}
        #   tags: ghcr.io/hs-heilbronn-devsecop-kis/taskman:latest
        # if: github.event.pull_request.merged == true

    #Exercise 3
    
        #1 - Authentication to Google Cloud
      - id: 'auth'
        name: Authentication to Google Cloud
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          workload_identity_provider: '${{ secrets.HS_PROVIDER }}'
          service_account: '${{ secrets.HS_SERVICE_ACCOUNT }}'
          
      #2 - Authentication to Google Cloud
      - id: 'deploy'
        name: Deploy to Cloud Run
        uses: 'google-github-actions/deploy-cloudrun@v1'
        with:
          service: 'taskman-hs-heilbronn-devsecop-kis'
          region: ${{env.REGION}}
          source: '.'
          env_vars: BACKEND=memory

      - name: 'Use output'
        run: 'curl "${{ steps.deploy.outputs.url }}"'